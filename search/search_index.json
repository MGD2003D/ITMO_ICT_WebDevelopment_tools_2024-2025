{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 1","text":""},{"location":"#_1","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":"<ul> <li>\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 1<ul> <li>\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435</li> <li>\u041c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0431\u0430\u0437\u044b<ul> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u0430 user</li> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u0430 booktaglink (link_model)</li> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u0430 tag</li> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u0430 book</li> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u0430 exchangerequest</li> </ul> </li> <li>\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 (main.py)</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 (15 \u0431\u0430\u043b\u043b\u043e\u0432)<ul> <li>1. \u0421\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (schemas.py)</li> <li>2. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 JWT (security.py)</li> <li>3. \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 (auth.py)</li> <li>4. \u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0440\u0430\u0431\u043e\u0442\u044b</li> </ul> </li> <li>\u041f\u043e\u0434\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u0437 .env \u0432 alembic<ul> <li>1. \u0428\u0430\u0431\u043b\u043e\u043d \u0432 alembic.ini</li> <li>2. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438\u0437 .env</li> <li>3. \u0427\u0442\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul> </li> </ul> </li> </ul> <p>\u0412 \u043e\u0442\u0447\u0435\u0442\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0440\u0435\u0442\u044c\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430  + \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043d\u0430 15 \u0431\u0430\u043b\u043b\u043e\u0432</p>"},{"location":"#_2","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0431\u0430\u0437\u044b","text":"<p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0442\u0430\u0431\u043b\u0438\u0446, \u043f\u043e\u043b\u0435\u0439 \u0438 \u0441\u0432\u044f\u0437\u0435\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0432 <code>models.py</code>.</p>"},{"location":"#user","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>user</code>","text":"\u041f\u043e\u043b\u0435 \u0422\u0438\u043f PK FK \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>id</code> <code>integer</code> \u0414\u0430 \u2014 \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 <code>username</code> <code>string</code> \u041d\u0435\u0442 \u2014 \u041b\u043e\u0433\u0438\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f <code>hashed_password</code> <code>string</code> \u041d\u0435\u0442 \u2014 \u0417\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c <code>bio</code> <code>string?</code> \u041d\u0435\u0442 \u2014 \u041a\u0440\u0430\u0442\u043a\u0430\u044f \u0431\u0438\u043e\u0433\u0440\u0430\u0444\u0438\u044f (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) <code>preferences</code> <code>string?</code> \u041d\u0435\u0442 \u2014 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438/\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) <p>\u0421\u0432\u044f\u0437\u0438: - <code>books</code> \u2014 One-to-Many \u2192 <code>Book.owner</code> - <code>sent_requests</code> \u2014 One-to-Many \u2192 <code>ExchangeRequest.requester</code> - <code>received_requests</code> \u2014 One-to-Many \u2192 <code>ExchangeRequest.owner</code> </p>"},{"location":"#booktaglink-link_model","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>booktaglink</code> (link_model)","text":"\u041f\u043e\u043b\u0435 \u0422\u0438\u043f PK FK \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>book_id</code> <code>integer</code> \u0414\u0430 <code>book.id</code> ID \u043a\u043d\u0438\u0433\u0438 <code>tag_id</code> <code>integer</code> \u0414\u0430 <code>tag.id</code> ID \u0442\u0435\u0433\u0430 <code>added_at</code> <code>datetime?</code> \u041d\u0435\u0442 \u2014 \u0412\u0440\u0435\u043c\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u0433\u0430 \u043a \u043a\u043d\u0438\u0433\u0435"},{"location":"#tag","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>tag</code>","text":"\u041f\u043e\u043b\u0435 \u0422\u0438\u043f PK FK \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>id</code> <code>integer</code> \u0414\u0430 \u2014 \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 <code>name</code> <code>string</code> \u041d\u0435\u0442 \u2014 \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u044f \u0442\u0435\u0433\u0430, \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f <p>\u0421\u0432\u044f\u0437\u0438: - <code>books</code> \u2014 Many-to-Many \u2192 <code>Book.tags</code> (\u0447\u0435\u0440\u0435\u0437 <code>BookTagLink</code>)  </p>"},{"location":"#book","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>book</code>","text":"\u041f\u043e\u043b\u0435 \u0422\u0438\u043f PK FK \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>id</code> <code>integer</code> \u0414\u0430 \u2014 \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 <code>title</code> <code>string</code> \u041d\u0435\u0442 \u2014 \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 <code>description</code> <code>string?</code> \u041d\u0435\u0442 \u2014 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) <code>owner_id</code> <code>integer</code> \u041d\u0435\u0442 <code>user.id</code> \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043a\u043d\u0438\u0433\u0438 <p>\u0421\u0432\u044f\u0437\u0438: - <code>owner</code> \u2014 Many-to-One \u2192 <code>User.books</code> - <code>requests</code> \u2014 One-to-Many \u2192 <code>ExchangeRequest.book</code> - <code>tags</code> \u2014 Many-to-Many \u2192 <code>Tag.books</code> (\u0447\u0435\u0440\u0435\u0437 <code>BookTagLink</code>)  </p>"},{"location":"#exchangerequest","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>exchangerequest</code>","text":"\u041f\u043e\u043b\u0435 \u0422\u0438\u043f PK FK \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>id</code> <code>integer</code> \u0414\u0430 \u2014 \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 <code>book_id</code> <code>integer</code> \u041d\u0435\u0442 <code>book.id</code> \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043a\u043d\u0438\u0433\u0443 <code>requester_id</code> <code>integer</code> \u041d\u0435\u0442 <code>user.id</code> \u041a\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u043d \u0437\u0430\u043f\u0440\u043e\u0441 <code>owner_id</code> <code>integer</code> \u041d\u0435\u0442 <code>user.id</code> \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043a\u043d\u0438\u0433\u0438 <code>status</code> <code>enum</code> \u041d\u0435\u0442 \u2014 \u0421\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: <code>pending</code>, <code>accepted</code>, <code>rejected</code> <code>created_at</code> <code>datetime</code> \u041d\u0435\u0442 \u2014 \u0412\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 <p>\u0421\u0432\u044f\u0437\u0438: - <code>book</code> \u2014 Many-to-One \u2192 <code>Book.requests</code> - <code>requester</code> \u2014 Many-to-One \u2192 <code>User.sent_requests</code> - <code>owner</code> \u2014 Many-to-One \u2192 <code>User.received_requests</code> </p> \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 `models.py` <pre><code>from enum import Enum\nfrom typing import Optional, List\nfrom datetime import datetime\nfrom sqlmodel import SQLModel, Field, Relationship\n\n\nclass User(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    username: str = Field(index=True)\n    hashed_password: str\n    bio: Optional[str] = None\n    preferences: Optional[str] = None\n\n    books: List[\"Book\"] = Relationship(back_populates=\"owner\")\n    sent_requests: List[\"ExchangeRequest\"] = Relationship(back_populates=\"requester\", sa_relationship_kwargs={\"foreign_keys\": \"ExchangeRequest.requester_id\"})\n    received_requests: List[\"ExchangeRequest\"] = Relationship(back_populates=\"owner\", sa_relationship_kwargs={\"foreign_keys\": \"ExchangeRequest.owner_id\"})\n\n\nclass BookTagLink(SQLModel, table=True):\n    book_id: int = Field(foreign_key=\"book.id\", primary_key=True)\n    tag_id: int = Field(foreign_key=\"tag.id\",  primary_key=True)\n    added_at: datetime | None\n\nclass Tag(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True, unique=True)\n\n    books: List[\"Book\"] = Relationship(back_populates=\"tags\", link_model=BookTagLink)\n\n\nclass Book(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    description: Optional[str] = None\n    owner_id: int = Field(foreign_key=\"user.id\")\n\n    owner: \"User\" = Relationship(back_populates=\"books\")\n    requests: List[\"ExchangeRequest\"] = Relationship(back_populates=\"book\")\n\n    tags: List[Tag] = Relationship(back_populates=\"books\", link_model=BookTagLink)\n\n\nclass RequestStatus(str, Enum):\n    pending = \"pending\"\n    accepted = \"accepted\"\n    rejected = \"rejected\"\n\n\nclass ExchangeRequest(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    book_id: int = Field(foreign_key=\"book.id\")\n    requester_id: int = Field(foreign_key=\"user.id\")\n    owner_id: int = Field(foreign_key=\"user.id\")\n    status: RequestStatus = Field(default=RequestStatus.pending)\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\n    book: Book = Relationship(back_populates=\"requests\")\n    requester: User = Relationship(back_populates=\"sent_requests\", sa_relationship_kwargs={\"foreign_keys\": \"ExchangeRequest.requester_id\"})\n    owner: User = Relationship(back_populates=\"received_requests\", sa_relationship_kwargs={\"foreign_keys\": \"ExchangeRequest.owner_id\"})\n\n\nclass TagRead(SQLModel):\n    id: int\n    name: str\n\n\nclass BookRead(SQLModel):\n    id: int\n    title: str\n    description: Optional[str]\n    tags: List[TagRead]\n    owner: \"UserShort\"\n\nclass BookCreate(SQLModel):\n    title: str\n    description: Optional[str] = None\n    owner_id: int\n\n\nclass ExchangeRequestRead(SQLModel):\n    id: int\n    status: RequestStatus\n    book: BookRead\n    requester: \"UserRead\"\n    owner: \"UserRead\"\n\n\nclass UserShort(SQLModel):\n    id: int\n    username: str\n\n\nclass UserRead(SQLModel):\n    id: int\n    username: str\n    books: List[BookRead]\n    sent_requests: List[ExchangeRequestRead]\n    received_requests: List[ExchangeRequestRead]\n\n\nUserRead.model_rebuild()\nBookRead.model_rebuild()\nTagRead.model_rebuild()\nExchangeRequestRead.model_rebuild()\n</code></pre>"},{"location":"#mainpy","title":"\u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 (main.py)","text":"\u041c\u0435\u0442\u043e\u0434 \u041f\u0443\u0442\u044c \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0422\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u041e\u0442\u0432\u0435\u0442 \u041a\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u0430 POST <code>/tags/</code> \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0442\u0435\u0433 <code>Tag</code> <code>TagRead</code> 201 GET <code>/tags/</code> \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0442\u0435\u0433\u043e\u0432 \u2014 <code>List[TagRead]</code> 200 POST <code>/books/{book_id}/tags/{tag_id}</code> \u041f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0442\u0435\u0433 \u043a \u043a\u043d\u0438\u0433\u0435 \u2014 \u2014 204 GET <code>/users/{user_id}</code> \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 (\u0441 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438) \u2014 <code>UserRead</code> 200 POST <code>/books/</code> \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043a\u043d\u0438\u0433\u0443 <code>BookCreate</code> <code>BookRead</code> 201 GET <code>/books/</code> \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433 \u2014 <code>List[BookRead]</code> 200 POST <code>/exchange/</code> \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d <code>ExchangeRequest</code> <code>ExchangeRequest</code> 201 GET <code>/exchange/</code> \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0431\u043c\u0435\u043d\u0430 \u2014 <code>List[ExchangeRequestRead]</code> 200 PATCH <code>/exchange/{request_id}/status</code> \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0431\u043c\u0435\u043d\u0430 <code>status: RequestStatus</code> <code>ExchangeRequest</code> 200 \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0432 `main.py` <pre><code>@app.post(\"/tags/\", response_model=TagRead, status_code=status.HTTP_201_CREATED)\ndef create_tag(tag: Tag, session: Session = Depends(get_session)):\n    session.add(tag)\n    session.commit()\n    session.refresh(tag)\n    return tag\n\n\n@app.get(\"/tags/\", response_model=List[TagRead])\ndef list_tags(session: Session = Depends(get_session)):\n    return session.exec(select(Tag)).all()\n\n\n@app.post(\"/books/{book_id}/tags/{tag_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef attach_tag(book_id: int, tag_id: int, session: Session = Depends(get_session)):\n    book = session.get(Book, book_id)\n    tag = session.get(Tag,  tag_id)\n    if not (book and tag):\n        raise HTTPException(404, \"Book or Tag not found\")\n    book.tags.append(tag)\n    session.add(book)\n    session.commit()\n\n@app.get(\"/users/{user_id}\", response_model=UserRead)\ndef read_user(user_id: int, session: Session = Depends(get_session)):\n    user = session.get(User, user_id)\n    if not user:\n        raise HTTPException(404, \"User not found\")\n    return user\n\n\n# CRUD \u0434\u043b\u044f \u043a\u043d\u0438\u0433\n@app.post(\"/books/\", response_model=BookRead, status_code=status.HTTP_201_CREATED)\ndef add_book(book_in: BookCreate, session: Session = Depends(get_session)):\n    book = Book.model_validate(book_in)\n    session.add(book)\n    session.commit()\n    session.refresh(book)\n    return book\n\n\n@app.get(\"/books/\", response_model=List[BookRead])\ndef list_books(session: Session = Depends(get_session)):\n    return session.exec(select(Book)).all()\n\n\n@app.post(\"/exchange/\", response_model=ExchangeRequest, status_code=status.HTTP_201_CREATED)\ndef request_exchange(req: ExchangeRequest, session: Session = Depends(get_session)):\n    session.add(req)\n    session.commit()\n    session.refresh(req)\n    return req\n\n\n@app.get(\"/exchange/\", response_model=List[ExchangeRequestRead])\ndef list_exchanges(session: Session = Depends(get_session)):\n    return session.exec(select(ExchangeRequest)).all()\n\n\n@app.patch(\"/exchange/{request_id}/status\", response_model=ExchangeRequest)\ndef update_exchange_status(\n    request_id: int,\n    status: RequestStatus,\n    session: Session = Depends(get_session)\n):\n    req = session.get(ExchangeRequest, request_id)\n    if not req:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Request not found\")\n    req.status = status\n    session.add(req)\n    session.commit()\n    session.refresh(req)\n    return req\n</code></pre>"},{"location":"#15","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430 (15 \u0431\u0430\u043b\u043b\u043e\u0432)","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043d\u0430 15 \u0431\u0430\u043b\u043b\u043e\u0432 \u0431\u044b\u043b \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a.</p>"},{"location":"#1-schemaspy","title":"1. \u0421\u0445\u0435\u043c\u044b \u0434\u0430\u043d\u043d\u044b\u0445 (<code>schemas.py</code>)","text":"<ul> <li>UserCreate \u2013 \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (<code>username</code>, <code>password</code>).</li> <li>UserRead \u2013 \u0432\u044b\u0445\u043e\u0434\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (<code>id</code>, <code>username</code>).</li> <li>Token \u0438 TokenData \u2013 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 JWT (<code>access_token</code>, <code>token_type</code>, \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 <code>username</code> \u0432 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0435).</li> <li>PasswordChange \u2013 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f (<code>old_password</code>, <code>new_password</code>).</li> </ul> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 `schemas.py` <pre><code>from typing import Optional, List\nfrom sqlmodel import SQLModel\n\n\nclass UserCreate(SQLModel):\n    username: str\n    password: str\n\n\nclass UserRead(SQLModel):\n    id: int\n    username: str\n\n\nclass Token(SQLModel):\n    access_token: str\n    token_type: str = \"bearer\"\n\n\nclass TokenData(SQLModel):\n    username: Optional[str] = None\n\n\nclass PasswordChange(SQLModel):\n    old_password: str\n    new_password: str\n</code></pre>"},{"location":"#2-jwt-securitypy","title":"2. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 JWT (<code>security.py</code>)","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Passlib \u0441 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c bcrypt \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438:</li> <li><code>hash_pwd(pwd: str) \u2192 str</code> \u2014 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f.</li> <li><code>verify_pwd(pwd, hashed) \u2192 bool</code> \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u0438 \u0445\u044d\u0448\u0430.</li> <li><code>create_access_token(data: dict, expires_min: int)</code> \u2014 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f JWT \u0441 \u043f\u043e\u043b\u0435\u043c <code>exp</code>.</li> <li><code>decode_token(token: str)</code> \u2014 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f JWT.</li> <li>\u0412\u0441\u0435 \u0441\u0435\u043a\u0440\u0435\u0442\u044b (\u043a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f JWT) \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>.env</code> (\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f <code>KEY</code>).</li> </ul> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 `security.py` <pre><code>from passlib.context import CryptContext\nfrom datetime import datetime, timedelta\nfrom jose import jwt, JWTError\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nSECRET_KEY = os.getenv(\"KEY\")\nALGORITHM = \"HS256\"\nACCESS_TOKEN_MIN = 30\n\npwd_ctx = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n\ndef hash_pwd(pwd: str) -&gt; str:\n    return pwd_ctx.hash(pwd)\n\n\ndef verify_pwd(pwd: str, hashed: str) -&gt; bool:\n    return pwd_ctx.verify(pwd, hashed)\n\n\ndef create_access_token(data: dict, expires_min: int = ACCESS_TOKEN_MIN):\n    to_encode = data.copy()\n    exp = datetime.utcnow() + timedelta(minutes=expires_min)\n    to_encode.update({\"exp\": exp})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n\n\ndef decode_token(token: str):\n    return jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n</code></pre>"},{"location":"#3-authpy","title":"3. \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 (<code>auth.py</code>)","text":"<p>\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e\u0434 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u043c <code>/auth</code> \u0438 \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u044b \u0442\u0435\u0433\u043e\u043c <code>auth</code>.</p> <ol> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f <code>POST /auth/register</code> </li> <li>\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 <code>UserCreate</code> (login + \u043f\u0430\u0440\u043e\u043b\u044c).  </li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.  </li> <li>\u0425\u044d\u0448\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043d\u043e\u0432\u043e\u0433\u043e <code>User</code> \u0432 \u0431\u0430\u0437\u0443.  </li> <li> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>UserRead</code>.</p> </li> <li> <p>\u041b\u043e\u0433\u0438\u043d \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 <code>POST /auth/login</code> </p> </li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0441\u0445\u0435\u043c\u0443 OAuth2PasswordRequestForm (\u043f\u043e\u043b\u044f <code>username</code> \u0438 <code>password</code>).  </li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0443\u0447\u0451\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 <code>verify_pwd</code>.  </li> <li> <p>\u041f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 JWT \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>Token</code>.</p> </li> <li> <p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f <code>GET /auth/me</code> </p> </li> <li>\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u0438\u0437 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 <code>Authorization: Bearer &lt;token&gt;</code>.  </li> <li>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 JWT, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 <code>sub</code> (\u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f).  </li> <li> <p>\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0431\u0430\u0437\u044b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>UserRead</code>.</p> </li> <li> <p>\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 <code>GET /auth/users</code> </p> </li> <li>\u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 JWT (<code>Depends(get_current_user)</code>).  </li> <li> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 <code>UserRead</code> \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435.</p> </li> <li> <p>\u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f <code>POST /auth/change-password</code> </p> </li> <li>\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 <code>PasswordChange</code> \u0441 <code>old_password</code> \u0438 <code>new_password</code>.  </li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0447\u0435\u0440\u0435\u0437 <code>verify_pwd</code>.  </li> <li>\u0415\u0441\u043b\u0438 \u0432\u0435\u0440\u043d\u043e \u2014 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0435 <code>hashed_password</code> \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 \u0445\u044d\u0448 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f.  </li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 <code>204 No Content</code>.</li> </ol> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 `auth.py` <pre><code>from fastapi import APIRouter, Depends, HTTPException, status, Form\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom sqlmodel import Session, select\nfrom schemas import UserCreate, UserRead, Token, TokenData, PasswordChange\nfrom models import User\nfrom connection import get_session\nfrom security import hash_pwd, verify_pwd, create_access_token, decode_token\nfrom jose import JWTError\n\nrouter = APIRouter(prefix=\"/auth\", tags=[\"auth\"])\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/auth/login\")\n\n\ndef get_user_by_name(session: Session, username: str) -&gt; User | None:\n    return session.exec(select(User).where(User.username == username)).first()\n\n\ndef authenticate(session: Session, username: str, password: str) -&gt; User | None:\n    user = get_user_by_name(session, username)\n    if user and verify_pwd(password, user.hashed_password):\n        return user\n\n\n@router.post(\"/register\", response_model=UserRead, status_code=201)\ndef register(payload: UserCreate, session: Session = Depends(get_session)):\n    if get_user_by_name(session, payload.username):\n        raise HTTPException(400, \"username taken\")\n    u = User(username=payload.username,\n             hashed_password=hash_pwd(payload.password))\n    session.add(u)\n    session.commit(); session.refresh(u)\n    return u\n\n\n@router.post(\"/login\", response_model=Token)\ndef login(form: OAuth2PasswordRequestForm = Depends(),\n          session: Session = Depends(get_session)):\n    user = authenticate(session, form.username, form.password)\n    if not user:\n        raise HTTPException(status_code=401, detail=\"invalid creds\")\n    token = create_access_token({\"sub\": user.username})\n    return {\"access_token\": token, \"token_type\": \"bearer\"}\n\n\ndef get_current_user(token: str = Depends(oauth2_scheme),\n                     session: Session = Depends(get_session)) -&gt; User:\n    try:\n        payload = decode_token(token)\n        username: str = payload.get(\"sub\")\n        assert username\n    except (JWTError, AssertionError):\n        raise HTTPException(401, \"Could not validate credentials\")\n    user = get_user_by_name(session, username)\n    if not user:\n        raise HTTPException(401, \"User not found\")\n    return user\n\n\n@router.get(\"/me\", response_model=UserRead)\ndef me(current: User = Depends(get_current_user)):\n    return current\n\n\n@router.get(\"/users\", response_model=list[UserRead])\ndef list_users(session: Session = Depends(get_session),\n               _: User = Depends(get_current_user)):\n    return session.exec(select(User)).all()\n\n\n@router.post(\"/change-password\", status_code=204)\ndef change_password(data: PasswordChange,\n                    current: User = Depends(get_current_user),\n                    session: Session = Depends(get_session)):\n    if not verify_pwd(data.old_password, current.hashed_password):\n        raise HTTPException(400, \"old password incorrect\")\n    current.hashed_password = hash_pwd(data.new_password)\n    session.add(current); session.commit()\n</code></pre>"},{"location":"#4","title":"4. \u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 <code>user</code> \u0441 \u0443\u0436\u0435 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u043e\u043b\u0435\u043c.  </li> <li>\u041b\u043e\u0433\u0438\u043d \u0432\u044b\u0434\u0430\u0451\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 JWT, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u0435 <code>\"sub\": username</code> \u0438 \u0432\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438.  </li> <li>\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043d\u0430 \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u0445 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0445 (<code>/auth/me</code>, <code>/auth/users</code>, <code>/auth/change-password</code>) \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c <code>Depends(oauth2_scheme)</code> \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>get_current_user</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f:</li> <li>\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043a\u0435\u043d,</li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0440\u043e\u043a \u0433\u043e\u0434\u043d\u043e\u0441\u0442\u0438 \u0438 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u0438,</li> <li>\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0431\u0430\u0437\u044b,</li> <li>\u0411\u0440\u043e\u0441\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 401, \u0435\u0441\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a.  </li> <li>\u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u0430 \u0442\u043e\u0439 \u0436\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u0438 \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0431\u0435\u0437 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e JWT.</li> </ol> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043e\u043b\u043d\u044b\u0439 \u0446\u0438\u043a\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u2192 \u041b\u043e\u0433\u0438\u043d \u2192 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u2192 \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c \u2192 \u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f.  \u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u044b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0445, \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u044b Pydantic-\u0441\u0445\u0435\u043c\u0430\u043c\u0438 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 REST-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. </p>"},{"location":"#env-alembic","title":"\u041f\u043e\u0434\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u0437 <code>.env</code> \u0432 alembic","text":""},{"location":"#1-alembicini","title":"1. \u0428\u0430\u0431\u043b\u043e\u043d \u0432 <code>alembic.ini</code>","text":"<pre><code>[alembic]\nsqlalchemy.url = postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}/${DB_NAME}\n</code></pre>"},{"location":"#2-env","title":"2. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438\u0437 <code>.env</code>","text":"<p>\u0412 \u043d\u0430\u0447\u0430\u043b\u0435 <code>run_migrations_online()</code> \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f <code>python-dotenv</code></p> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n</code></pre>"},{"location":"#3","title":"3. \u0427\u0442\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>url_tokens = {\n  \"DB_USER\": os.getenv(\"DB_USER\", \"\"),\n  \"DB_PASS\": os.getenv(\"DB_PASS\", \"\"),\n  \"DB_HOST\": os.getenv(\"DB_HOST\", \"\"),\n  \"DB_NAME\": os.getenv(\"DB_NAME\", \"\")\n}\n</code></pre> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 `env.py` <pre><code>from logging.config import fileConfig\n\nfrom alembic import context\n\nfrom sqlalchemy import create_engine\nimport os\nimport re\nfrom dotenv import load_dotenv\n\nfrom models import *\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\ndb_url = os.getenv('DB_ADMIN')\nif db_url:\n    config.set_main_option('sqlalchemy.url', db_url)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\n#target_metadata = None\n\ntarget_metadata=SQLModel.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline() -&gt; None:\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -&gt; None:\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    load_dotenv()\n    url_tokens = {\n        \"DB_USER\": os.getenv(\"DB_USER\", \"\"),\n        \"DB_PASS\": os.getenv(\"DB_PASS\", \"\"),\n        \"DB_HOST\": os.getenv(\"DB_HOST\", \"\"),\n        \"DB_NAME\": os.getenv(\"DB_NAME\", \"\")\n    }\n\n    url = config.get_main_option(\"sqlalchemy.url\")\n\n    url = re.sub(r\"\\${(.+?)}\", lambda m: url_tokens[m.group(1)], url)\n    connectable = create_engine(url)\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata,\n            compare_type=True,\n            compare_server_default=True,\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n</code></pre>"}]}